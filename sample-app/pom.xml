<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (C) 2011 Eric Pabst.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.github.epabst.scala-android-crud</groupId>
  <artifactId>sample-app</artifactId>
  <version>0.3-alpha6-SNAPSHOT</version>
  <packaging>apk</packaging>
  <name>sample-app</name>
  <scm>
    <connection>scm:git:https://epabst@github.com/epabst/scala-android-crud.git</connection>
    <developerConnection>scm:git:https://epabst@github.com/epabst/scala-android-crud.git</developerConnection>
    <url>https://github.com/epabst/scala-android-crud</url>
  </scm>
  <distributionManagement>
    <repository>
      <id>scala-tools.org</id>
      <url>http://nexus.scala-tools.org/content/repositories/releases/</url>
    </repository>
    <snapshotRepository>
      <id>scala-tools.org</id>
      <url>http://nexus.scala-tools.org/content/repositories/snapshots/</url>
      <uniqueVersion>false</uniqueVersion>
    </snapshotRepository>
  </distributionManagement>
  <properties>
    <scala.version>2.8.1</scala.version>
    <android.version>2.2.1</android.version>
    <!-- set a custom format that is guaranteed to grow as a Long number, so it can be used as version code
    in the AndroidManifest.xml -->
    <maven.build.timestamp.format>yyMMdddHHmm</maven.build.timestamp.format>
    <!-- this trick of loading build timestamp into other property is necessary due to
    http://jira.codehaus.org/browse/MRESOURCES-99 and also more readable -->
    <!-- switched to use buildnumber-maven-plugin instead of maven.build.timestamp since the
    version of Hudson I'm using has a bug that makes it not work.-->
    <versionCode>${buildNumber}</versionCode>
  </properties>
  <repositories>
    <repository>
      <id>scala-tools.org</id>
      <name>Scala-tools Maven2 Repository</name>
      <url>http://scala-tools.org/repo-releases</url>
    </repository>
  </repositories>
  <pluginRepositories>
    <pluginRepository>
      <id>scala-tools.org</id>
      <name>Scala-tools Maven2 Repository</name>
      <url>http://scala-tools.org/repo-releases</url>
    </pluginRepository>
  </pluginRepositories>

  <build>
    <sourceDirectory>src/main/scala</sourceDirectory>
    <testSourceDirectory>src/test/java</testSourceDirectory>
    <resources>
      <resource>
        <directory>${project.basedir}</directory>
        <filtering>true</filtering>
        <targetPath>${project.build.directory}/filtered-manifest</targetPath>
        <includes>
          <include>AndroidManifest.xml</include>
        </includes>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>buildnumber-maven-plugin</artifactId>
        <version>1.0</version>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>create</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <format>{0,date,${maven.build.timestamp.format}}</format>
          <items>
            <item>timestamp</item>
          </items>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>resources</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.scala-tools</groupId>
        <artifactId>maven-scala-plugin</artifactId>
        <version>2.15.2</version>
        <executions>
          <execution>
            <id>scala-compile-first</id>
            <phase>process-resources</phase>
            <goals>
              <goal>add-source</goal>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>scala-test-compile</id>
            <phase>process-test-resources</phase>
            <goals>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!-- proguard can shrink the source classes and remove unused classes and more.. -->
      <plugin>
        <groupId>com.pyx4me</groupId>
        <artifactId>proguard-maven-plugin</artifactId>
        <version>2.0.4</version>
        <executions>
          <execution>
            <phase>process-classes</phase>
            <goals>
              <goal>proguard</goal>
            </goals>
          </execution>
        </executions>
        <!-- we need to override the dependency of the plugin to get a newer version of proguard -->
        <dependencies>
          <dependency>
            <groupId>net.sf.proguard</groupId>
            <artifactId>proguard</artifactId>
            <version>4.4</version>
            <scope>runtime</scope>
          </dependency>
        </dependencies>
        <configuration>
          <proguardVersion>4.4</proguardVersion>
          <maxMemory>256m</maxMemory>
          <injar>android-classes</injar>
          <libs>
            <lib>${rt.jar.path}</lib>
            <lib>${jsse.jar.path}</lib>
          </libs>
          <skip>false</skip>
          <obfuscate>${android.obfuscate}</obfuscate>
          <addMavenDescriptor>false</addMavenDescriptor>
          <options>
            <!-- which classes are we keeping around, android specific -->
            <option>-keep public class * extends android.app.Activity</option>
            <option>-keep public class * extends android.app.Application</option>
            <option>-keep public class * extends android.app.Service</option>
            <option>-keep public class * extends android.app.backup.BackupAgent</option>
            <option>-keep public class * extends android.content.BroadcastReceiver</option>
            <option>-keep public class * extends android.content.ContentProvider</option>
            <option><![CDATA[-keep public class * extends android.view.View {
                              public <init>(android.content.Context);
                              public <init>(android.content.Context, android.util.AttributeSet);
                              public <init>(android.content.Context, android.util.AttributeSet, int);
                              public void set*(...);  }]]></option>
            <option><![CDATA[-keepclasseswithmembers class * {
                              public <init> (android.content.Context, android.util.AttributeSet); } ]]></option>
            <option><![CDATA[-keepclasseswithmembers class * {
                              public <init> (android.content.Context, android.util.AttributeSet, int); } ]]></option>
            <option><![CDATA[-keepclassmembers class * implements android.os.Parcelable {
                              static android.os.Parcelable$Creator *; } ]]></option>
            <!-- viewId(Class, String) uses reflection, and might be in use. -->
            <option><![CDATA[-keep class **.R$* { public static <fields>; } ]]></option>
            <option><![CDATA[-keepclasseswithmembernames class * { native <methods>; } ]]></option>
            <option><![CDATA[-keepclassmembers class * extends java.lang.Enum {
                              public static **[] values();
                              public static ** valueOf(java.lang.String); } ]]></option>
            <option><![CDATA[-keepclassmembers class * extends android.app.Activity{
                              public void *(android.view.View); } ]]></option>


            <!-- general proguard options -->
            <option>-dontskipnonpubliclibraryclasses</option>
            <!--<option>-dontusemixedcaseclassnames</option>-->
            <!--<option>-dontskipnonpubliclibraryclassmembers</option>-->
            <!--<option>-allowaccessmodification</option>-->

            <!-- you really should NOT avoid warning but it can be helpful when testing options -->
            <option>-ignorewarnings</option>
            <option>-verbose</option>
            <option>-printmapping ${project.build.directory}/proguard_map.txt</option>

            <!-- next options are necessary to decipher stack traces with retrace later, relies on the map file created -->
            <option>-renamesourcefileattribute SourceFile</option>
            <option>-keepattributes SourceFile,LineNumberTable</option>
            <!--keepattributes SourceFile,LineNumberTable,*Annotation*-->

            <!-- Optimization related settings -->
            <option>${proguard.optimization.option1}</option>
            <option>${proguard.optimization.option2}</option>
          </options>
          <!-- these are here to prevent a lot of "duplicate definition of library class" warnings -->
          <exclusions>
            <exclusion><groupId>org.scala-lang</groupId><artifactId>scala-library</artifactId></exclusion>
            <exclusion><groupId>org.scala-lang</groupId><artifactId>scala-compiler</artifactId></exclusion>
            <exclusion><groupId>com.github.epabst.scala-android-crud</groupId><artifactId>scala-android-crud</artifactId></exclusion>
            <exclusion><groupId>com.github.epabst.triangle</groupId><artifactId>triangle</artifactId></exclusion>
          </exclusions>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.jayway.maven.plugins.android.generation2</groupId>
        <artifactId>maven-android-plugin</artifactId>
        <version>2.9.0-beta-2</version>
        <configuration>
          <androidManifestFile>${project.build.directory}/filtered-manifest/AndroidManifest.xml</androidManifestFile>
          <assetsDirectory>${project.basedir}/assets</assetsDirectory>
          <resourceDirectory>${project.basedir}/res</resourceDirectory>
          <sdk>
            <platform>8</platform>
          </sdk>
          <emulator>
            <avd>22</avd>
          </emulator>
          <zipalign>
            <verbose>true</verbose>
          </zipalign>
          <deleteConflictingFiles>true</deleteConflictingFiles>
          <undeployBeforeDeploy>true</undeployBeforeDeploy>
          <sign><debug>${sign.debug}</debug></sign>
        </configuration>
        <extensions>true</extensions>
        <executions>
          <execution>
            <id>alignApk</id>
            <phase>package</phase>
            <goals>
              <goal>zipalign</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.3.2</version>
        <configuration>
          <source>1.5</source>
          <target>1.5</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.5</version>
        <configuration>
          <useSystemClassLoader>false</useSystemClassLoader>
          <argLine>-Xmx128m</argLine>
          <includes>
            <include>**/*Spec.class</include>
            <include>**/*Test.class</include>
          </includes>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <reporting>
    <plugins>
      <plugin>
        <groupId>org.scala-tools</groupId>
        <artifactId>maven-scala-plugin</artifactId>
      </plugin>
    </plugins>
  </reporting>

  <profiles>
    <profile>
      <id>development</id>
      <!-- using this since activeByDefault does not work well with multiple profiles -->
      <activation>
        <property>
          <name>performRelease</name>
          <value>!true</value>
        </property>
      </activation>
      <properties>
        <deployment.stage>In Development</deployment.stage>
        <android.debuggable>true</android.debuggable>
        <android.obfuscate>false</android.obfuscate>
        <proguard.optimization.option1>-dontoptimize</proguard.optimization.option1>
        <!-- This should be "none", but leaving it blank causes problems, so simply repeating the prior option. -->
        <proguard.optimization.option2>-dontoptimize</proguard.optimization.option2>
        <sign.debug>true</sign.debug>
      </properties>
    </profile>
    <profile>
      <id>production</id>
      <!-- via this activation the profile is automatically used when the release is done with the maven release plugin -->
      <activation>
        <property>
          <name>performRelease</name>
          <value>true</value>
        </property>
      </activation>
      <properties>
        <deployment.stage>In Production</deployment.stage>
        <android.debuggable>false</android.debuggable>
        <android.obfuscate>true</android.obfuscate>
        <proguard.optimization.option1>-optimizationpasses 3</proguard.optimization.option1>
        <!-- The -optimizations option disables some arithmetic simplifications that Dalvik 1.0 and 1.5 can't handle. -->
        <proguard.optimization.option2>-optimizations !code/simplification/arithmetic,!code/allocation/variable</proguard.optimization.option2>
        <sign.debug>false</sign.debug>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-jarsigner-plugin</artifactId>
            <version>1.2</version>
            <executions>
              <execution>
                <id>signing</id>
                <goals>
                  <goal>sign</goal>
                  <goal>verify</goal>
                </goals>
                <phase>package</phase>
                <inherited>true</inherited>
                <configuration>
                  <removeExistingSignatures>true</removeExistingSignatures>
                  <archiveDirectory />
                  <includes>
                    <include>${project.build.directory}/${project.build.finalName}.apk</include>
                  </includes>
                  <keystore>${sign.keystore}</keystore>
                  <alias>${sign.alias}</alias>
                  <storepass>${sign.storepass}</storepass>
                  <keypass>${sign.keypass}</keypass>
                  <verbose>true</verbose>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <!-- the signed apk then needs to be zipaligned -->
          <plugin>
            <groupId>com.jayway.maven.plugins.android.generation2</groupId>
            <artifactId>maven-android-plugin</artifactId>
            <inherited>true</inherited>
            <configuration>
              <sign>
                <debug>false</debug>
              </sign>
              <zipalign>
                <verbose>true</verbose>
                <inputApk>${project.build.directory}/${project.build.finalName}.apk</inputApk>
                <outputApk>${project.build.directory}/${project.build.finalName}-signed-aligned.apk
                </outputApk>
              </zipalign>
            </configuration>
            <executions>
              <execution>
                <id>alignApk</id>
                <phase>package</phase>
                <goals>
                  <goal>zipalign</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <configuration>
              <artifacts>
                <artifact>
                  <file>${project.build.directory}/${project.build.finalName}-signed-aligned.apk</file>
                  <type>apk</type>
                  <classifier>signed-aligned</classifier>
                </artifact>
                <artifact>
                  <file>${project.build.directory}/proguard_map.txt</file>
                  <type>map</type>
                  <classifier>release</classifier>
                </artifact>
              </artifacts>
            </configuration>
            <executions>
              <execution>
                <id>attach-signed-aligned</id>
                <phase>package</phase>
                <goals>
                  <goal>attach-artifact</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- to avoid having to do symlinks to rt.jar like documented e.g. here
    http://bruehlicke.blogspot.com/2009/11/missing-rtjar-mac-os-x-using-proguard.html
    http://codebistro.com/2010/07/18/proguard-and-runtime-libraries-on-mac-os-x/
    -->
    <profile>
      <id>linux</id>
      <activation>
        <os>
          <family>unix</family>
        </os>
      </activation>
      <properties>
        <rt.jar.path>${java.home}/lib/rt.jar</rt.jar.path>
        <jsse.jar.path>${java.home}/lib/jsse.jar</jsse.jar.path>
      </properties>
    </profile>
    <!-- mac profile has to be after unix since running on mac will trigger both -->
    <profile>
      <id>mac</id>
      <activation>
        <os>
          <family>mac</family>
        </os>
      </activation>
      <properties>
        <!-- absolute path -->
        <!--<rt.jar.path>/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Classes/classes.jar</rt.jar.path>-->
        <!-- or with JAVA_HOME /System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Home/ -->
        <rt.jar.path>${java.home}/../Classes/classes.jar</rt.jar.path>
        <jsse.jar.path>${java.home}/../Classes/jsse.jar</jsse.jar.path>
      </properties>
    </profile>
    <profile>
      <id>windows</id>
      <activation>
        <os>
          <family>windows</family>
        </os>
      </activation>
      <properties>
        <rt.jar.path>${java.home}/lib/rt.jar</rt.jar.path>
        <jsse.jar.path>${java.home}/lib/jsse.jar</jsse.jar.path>
      </properties>
    </profile>

  </profiles>

  <dependencies>
    <!-- must come before android.jar -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.5</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.google.android</groupId>
      <artifactId>android</artifactId>
      <version>${android.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>${scala.version}</version>
    </dependency>
    <dependency>
      <!-- this is before sl4fj-android in the classpath since the android one fails during unit tests w/o the real android -->
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-jdk14</artifactId>
      <version>1.6.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.github.epabst.scala-android-crud</groupId>
      <artifactId>scala-android-crud</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.github.epabst.scala-android-crud</groupId>
      <artifactId>scala-android-crud</artifactId>
      <version>${project.version}</version>
      <type>apklib</type>
    </dependency>
    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest</artifactId>
      <version>1.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>1.8.5</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.easymock</groupId>
      <artifactId>easymock</artifactId>
      <version>2.5.2</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.easymock</groupId>
      <artifactId>easymockclassextension</artifactId>
      <version>2.5.2</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
</project>
